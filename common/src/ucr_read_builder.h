#ifndef UCR_READ_BUILDER_H
#define UCR_READ_BUILDER_H

/* Generated by flatcc 0.5.3-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef UCR_READ_READER_H
#include "ucr_read_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __unifyfs_Extent_formal_args , uint32_t v0, uint64_t v1, uint64_t v2
#define __unifyfs_Extent_call_args , v0, v1, v2
static inline unifyfs_Extent_t *unifyfs_Extent_assign(unifyfs_Extent_t *p, uint32_t v0, uint64_t v1, uint64_t v2)
{ p->fid = v0; p->offset = v1; p->length = v2;
  return p; }
static inline unifyfs_Extent_t *unifyfs_Extent_copy(unifyfs_Extent_t *p, const unifyfs_Extent_t *p2)
{ p->fid = p2->fid; p->offset = p2->offset; p->length = p2->length;
  return p; }
static inline unifyfs_Extent_t *unifyfs_Extent_assign_to_pe(unifyfs_Extent_t *p, uint32_t v0, uint64_t v1, uint64_t v2)
{ flatbuffers_uint32_assign_to_pe(&p->fid, v0); flatbuffers_uint64_assign_to_pe(&p->offset, v1); flatbuffers_uint64_assign_to_pe(&p->length, v2);
  return p; }
static inline unifyfs_Extent_t *unifyfs_Extent_copy_to_pe(unifyfs_Extent_t *p, const unifyfs_Extent_t *p2)
{ flatbuffers_uint32_copy_to_pe(&p->fid, &p2->fid); flatbuffers_uint64_copy_to_pe(&p->offset, &p2->offset); flatbuffers_uint64_copy_to_pe(&p->length, &p2->length);
  return p; }
static inline unifyfs_Extent_t *unifyfs_Extent_assign_from_pe(unifyfs_Extent_t *p, uint32_t v0, uint64_t v1, uint64_t v2)
{ flatbuffers_uint32_assign_from_pe(&p->fid, v0); flatbuffers_uint64_assign_from_pe(&p->offset, v1); flatbuffers_uint64_assign_from_pe(&p->length, v2);
  return p; }
static inline unifyfs_Extent_t *unifyfs_Extent_copy_from_pe(unifyfs_Extent_t *p, const unifyfs_Extent_t *p2)
{ flatbuffers_uint32_copy_from_pe(&p->fid, &p2->fid); flatbuffers_uint64_copy_from_pe(&p->offset, &p2->offset); flatbuffers_uint64_copy_from_pe(&p->length, &p2->length);
  return p; }
__flatbuffers_build_struct(flatbuffers_, unifyfs_Extent, 24, 8, unifyfs_Extent_identifier, unifyfs_Extent_type_identifier)

static const flatbuffers_voffset_t __unifyfs_ReadRequest_required[] = { 0 };
typedef flatbuffers_ref_t unifyfs_ReadRequest_ref_t;
static unifyfs_ReadRequest_ref_t unifyfs_ReadRequest_clone(flatbuffers_builder_t *B, unifyfs_ReadRequest_table_t t);
__flatbuffers_build_table(flatbuffers_, unifyfs_ReadRequest, 1)

#define __unifyfs_ReadRequest_formal_args , unifyfs_Extent_vec_ref_t v0
#define __unifyfs_ReadRequest_call_args , v0
static inline unifyfs_ReadRequest_ref_t unifyfs_ReadRequest_create(flatbuffers_builder_t *B __unifyfs_ReadRequest_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, unifyfs_ReadRequest, unifyfs_ReadRequest_identifier, unifyfs_ReadRequest_type_identifier)

__flatbuffers_build_vector_field(0, flatbuffers_, unifyfs_ReadRequest_extents, unifyfs_Extent, unifyfs_Extent_t, unifyfs_ReadRequest)

static inline unifyfs_ReadRequest_ref_t unifyfs_ReadRequest_create(flatbuffers_builder_t *B __unifyfs_ReadRequest_formal_args)
{
    if (unifyfs_ReadRequest_start(B)
        || unifyfs_ReadRequest_extents_add(B, v0)) {
        return 0;
    }
    return unifyfs_ReadRequest_end(B);
}

static unifyfs_ReadRequest_ref_t unifyfs_ReadRequest_clone(flatbuffers_builder_t *B, unifyfs_ReadRequest_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (unifyfs_ReadRequest_start(B)
        || unifyfs_ReadRequest_extents_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, unifyfs_ReadRequest_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* UCR_READ_BUILDER_H */
